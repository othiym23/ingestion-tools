#!/usr/bin/env ruby
script_path = __FILE__
script_path = File.readlink(script_path) if File.symlink?(script_path)

$: << File.join(File.dirname(script_path), '../lib')

require 'jttui/jttui'
require 'jttui/jttuistd'
require 'logger'

require 'adaptor/euterpe_dashboard_factory'
require 'adaptor/netjuke_factory'

require 'ui/fln_widgets'
require 'ui/ingestion_widgets'
require 'ui/album_selection_model'
require 'ui/controller_state'

MY_LOGGER = Logger.new('jttui_trace.log')
MY_LOGGER.level = Logger::WARN
#ActiveRecord::Base.logger = Logger.new('ingestion.log')

ARCHIVE_BASE = '/data/music/mp3'
PENDING_BASE = '/data/music/holding/pending'

STDOUT.sync = true
source_directory = File.expand_path(PENDING_BASE)
raise IOError.new("Path #{source_directory} does not exist!") unless File.exists?(source_directory)

at_exit { puts "\nSeeya!" }

# Hack into the guts of JTTui so I can log what it's doing.
module JTTui
  alias_method :_add_message, :addmessage
  def addmessage(*msg)
    target_name = (msg[0] ? msg[0].name : 'ROOT CONTEXT')
    log_message = "[#{target_name}] target for newly added message #{msg[1]}"
    log_message << " '#{msg[2]}'" if msg[2]
    MY_LOGGER.debug(log_message)
    _add_message(*msg)
  end

  alias_method :_del_messages, :delmessages
  def delmessages(*msg)
    target_name = (msg[0] ? msg[0].name : 'ROOT CONTEXT')
    log_message = "[#{target_name}] target for newly added message #{msg[1]}"
    log_message << " '#{msg[2]}'" if msg[2]
    MY_LOGGER.debug(log_message)
    _del_messages(*msg)
  end

  alias_method :_send_message, :sendmessage
  def sendmessage(msg)
    log_message = "[#{msg[0].name}] received message #{msg[1]}"
    log_message << " '#{msg[2]}'" if msg[2]
    MY_LOGGER.debug(log_message)
    _send_message(msg)
  end
end

class JTTWindow
  alias_method :_paint_self, :paintself
  def paintself(pc)
    MY_LOGGER.debug("paintself: [#{@name}]")
    _paint_self(pc)
  end
  
  # PATCH: the JTTui code calls paint directly when visible= is invoked,
  # breaking the refresh model for the component affected, as well as all
  # its children
  def visible=(v)
    if @visible ^ v
      @visible=v
      MY_LOGGER.warn("FIXING JTTWindow.visible= by not exploding #{@name}'s message queue when pane " << (v ? "shown" : "hidden"))
      addmessage @parent, :paint
    end
  end
end

module Euterpe
  module Ingestion
    def self.connect_to_euterpe
      ActiveRecord::Base.establish_connection(
        :adapter  => "postgresql",
        :username => "ogd",
        :database => "euterpe-dash-dev",
        :encoding => "SQL_ASCII"
      )
    end
    
    def self.connect_to_netjuke
      Netjuke::Base.establish_connection(
        :adapter  => "mysql",
        :username => "ogd",
        :database => "netjuke",
        :password => "set_password_here"
      )
    end
  end
end

class StatusPane < FLNBorderlessPane
  def initialize(model, parent, left, top, width)
    MY_LOGGER.info("StatusPane initialization started")
    super(parent, self.class.name, left, top, width, 3, '')
    @color = JTTui.aaxz_basic

    @state_label = JTTWLabel.new(self, 'state_label', 0, 0, self.w, 1, '')
    @state_label.color = JTTui.aaxz_basic
    
    @status_line = FLNImmediateLabel.new(self, 'status_line', 0, self.h - 1, self.w - 26, 1, '')
    @pending = PendingStatus.new(model, self, self.h - 1, self.w)
    MY_LOGGER.info("StatusPane initialization complete")
  end

  def state_label=(mode_name)
    @state_label.caption = mode_name
  end
  
  def message=(value)
    MY_LOGGER.info("#{self.class.name} message '#{value}'")
    @status = value || ''
    @status_line.caption = @status
  end
end

class ControlLine
  def initialize(parent, top, width)
    MY_LOGGER.info("ControlLine initialization started")
    @parent = parent

    @prompt_label = JTTWLabel.new(parent, 'prompt_label', 0, top, width, 1, 'LOADING')
    @prompt_label.color = JTTui.aaxz_basic
    MY_LOGGER.info("ControlLine initialization complete")
  end
  
  def prompt_label=(value)
    @prompt_label.caption = value
  end
  
  def prompt_with_callback(state_label, prompt_string, initial_value, &block)
    @parent.state_label = state_label
    @prompt_label.caption = prompt_string

    @prompt_field = FLNButtonlessEditline.new(@parent, 'prompt_field',
                                              prompt_string.size - 1, @parent.h - 2, 
                                              @parent.w - (prompt_string.size + 2), 1, '', true)
    @prompt_field.get_finished(initial_value || '', &block)
    JTTui.activewindow = @prompt_field
    
    @parent.addmessage @parent, :paint
  end
  
  def set_active!
    JTTui.activewindow = @prompt_label
  end
end

class ProcessingApplication < FLNBorderlessPane
  attr_reader :album_loader
  
  def initialize(parent)
    MY_LOGGER.info("ProcessingApplication initialization started")
    self.visible = false
    
    super(parent, self.class.name, 0, 0, parent.w, parent.h, '')
    @color = JTTui.aaxz_basic
    
    @album_loader = AlbumDao

    @album_model = AlbumSelectionModel.new
    @album_model.album_loader = @album_loader
    
    @status_pane = StatusPane.new(@album_model, self, 0, self.h - 3, self.w)
    @album_model.status = @status_pane
    
    @control_pane = ControlLine.new(@status_pane, @status_pane.h - 2, @status_pane.w)
    
    @status_pane.message = "Connecting to metadata caches..."
    Euterpe::Ingestion::connect_to_netjuke
    Euterpe::Ingestion::connect_to_euterpe
    @status_pane.message = 'Connected to metadata caches'
    
    ControllerState.model = @album_model
    ControllerState.context = self
    ControllerState.control = @control_pane
    ControllerState.status = @status_pane
    ControllerState.logger = MY_LOGGER

    @current_state = StartState.default
    
    @album_model.add_observer(self)
    @album_model.total = Euterpe::Dashboard::Album.count
    MY_LOGGER.info("#{@album_model.total} albums loaded")
    
    self.visible = true
    MY_LOGGER.info("ProcessingApplication initialization complete")
  end
  
  def keypress(key)
    # Due to the way the application delegates input to controller objects,
    # which in turn delegate messages to the JTTui components they control,
    # we need to clear the message queue here to ensure we don't get stuck in
    # an infinite loop as the application dispatches to the controller, which
    # dispatches to its component delegate(s), which propagates the message to
    # its container (this object), ad infinitum.
    delmessages self, :keypress
    @current_state.dispatch(key)
  end
  
  def get_panel(panel_id)
    @panel_cache ||= {}
    
    unless @panel_cache[panel_id]
      case panel_id.to_s
      when 'AlbumList'
        panel = AlbumList.new(self, 'Album chooser',
                              2, 1, self.w - 4, self.h - 5) do |album|
          @album_model.selected = album
          self.change_state(EditState)
        end
      when 'FLNSlidingTextReader'
        panel = FLNSlidingTextReader.new(self, 'Information window',
                                         2, 1, self.w - 4, self.h - 5)
      else
        MY_LOGGER.fatal("Don't know how to create '#{panel_id}'!")
        raise "Don't know how to create '#{panel_id}'!"
      end
      
      @panel_cache[panel_id] = panel
    end
    
    @panel_cache[panel_id]
  end
  
  def change_state(new_state_klass, *args)
    MY_LOGGER.info("#{self.class.name}.change_state#before in state '#{@current_state.class.name}'")
    @previous_state = @current_state
    @current_state = new_state_klass.default

    @previous_state.exit if @previous_state
    @current_state.enter(*args) if @current_state
    MY_LOGGER.info("#{self.class.name}.change_state#after in state '#{@current_state.class.name}'")
    
    update
  end
  
  def set_active
    @control_pane.set_active!
  end
  
  def update(*args)
    @status_pane.state_label = @current_state.class.state_name
    @control_pane.prompt_label = @current_state.prompt_string
    addmessage self, :paint
    @current_state.update
  end

  def paintself(pc)
    super(pc)
    pc.move(4, 2)
    pc.addstra("::AOAIOXXYSZ:: music archive services, v1", JTTui.aaxz_basic)
    pc.move(6, 3)
    pc.addstra("e-mail Forrest (ogd@aoaioxxysz.net) if anything weird happens.", JTTui.aaxz_basic)
  end
end

JTTui.run do |root|
  JTTColor.new('aaxz_basic', JTCur.color_white, JTCur.color_black, 0, 0).recompute
  JTTColor.new('aaxz_important', JTCur.color_white, JTCur.color_black, JTCur.attr_bold, JTCur.attr_bold).recompute
  JTTColor.new('aaxz_reversed', JTCur.color_black, JTCur.color_white, JTCur.attr_bold, JTCur.attr_bold).recompute
  JTTColor.new('color_edit_dis', JTCur.color_white, JTCur.color_black, 0, 0).recompute
  JTTColor.new('color_edit', JTCur.color_white, JTCur.color_black, JTCur.attr_bold, JTCur.attr_bold).recompute
  JTTColor.new('color_edit_hi', JTCur.color_white, JTCur.color_black, JTCur.attr_bold, JTCur.attr_bold).recompute

  processing = ProcessingApplication.new(root)
end